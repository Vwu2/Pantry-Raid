{"ast":null,"code":"var _jsxFileName = \"/Users/vincentwu/Documents/GitHub/csc648-03-fa19-Team101/application/team-website/src/pages/MealPlan.jsx\";\nimport React, { Component } from 'react';\nimport { Accordion, Button, Card, ListGroup } from 'react-bootstrap';\nimport Step1Meal from '../components/Step1Meals';\nimport Step2Meal from '../components/Step2Meals';\nimport CalendarSelection from '../components/CalendarSelection';\nimport ReadCalendarView from '../components/ReadCalendarView';\nimport PantryRaidNavBar from '../components/PantryRaidNavBar';\nimport { RECIPE_NAMES } from '../globals/recipes';\nimport \"./MealPlan.css\";\nimport { createSessionFormData } from \"../globals/sessionform\";\nimport { withCookies } from \"react-cookie\";\nimport { Redirect } from \"react-router-dom\";\n\nclass MealPlan extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      selectedDates: null,\n      currentStep: 1,\n      addedMealNames: [],\n      amountOfMealsPerDay: 1,\n      errorMessage: '',\n      mealPlans: [],\n      clickedViewPlan: false,\n      clickedCreateMealPlan: false,\n      needLogin: false\n    };\n\n    this.getDataFromDb = () => {\n      const req = new XMLHttpRequest();\n\n      req.onreadystatechange = () => {\n        if (req.readyState === 4) {\n          if (req.response === 'failure') {\n            this.setState({\n              needLogin: true\n            });\n          } else {\n            this.setState({\n              mealPlans: JSON.parse(req.response).map(mp => ({\n                meals: mp.recipes,\n                dates: {\n                  start: new Date(mp.start_date * 1000),\n                  end: new Date(mp.end_date * 1000)\n                },\n                mpid: mp.mpid\n              }))\n            });\n          }\n        }\n      };\n\n      const formData = createSessionFormData(this.props);\n      req.open('POST', 'http://cryptoflipit.com/backend/get_meal_plans');\n      req.send(formData);\n    };\n\n    this.handleRemoveMealPlan = mpid => {\n      const req = new XMLHttpRequest();\n\n      req.onreadystatechange = () => {\n        if (req.readyState === 4) {\n          this.getDataFromDb();\n        }\n      };\n\n      const formData = createSessionFormData(this.props);\n      formData.append('mpid', mpid);\n      req.open('POST', 'http://cryptoflipit.com/backend/remove_meal_plan');\n      req.send(formData);\n    };\n\n    this.handleCalendarSelect = event => {\n      if (event.eventType === 3) {\n        this.setState({\n          selectedDates: {\n            start: event.start,\n            end: event.end\n          }\n        });\n      }\n    };\n\n    this.handleNextStep = () => {\n      let currentStep = this.state.currentStep;\n      currentStep = currentStep >= 3 ? 4 : currentStep + 1;\n\n      if (this.state.currentStep === 2) {\n        //the array Does not include an undefined object\n        if (this.state.addedMealNames.length > 0 && !this.state.addedMealNames.includes(undefined)) {\n          this.setState({\n            currentStep: currentStep,\n            errorMessage: ''\n          });\n        } else {\n          this.setState({\n            errorMessage: 'Error: Please add meals'\n          });\n        }\n      } else {\n        this.setState({\n          currentStep: currentStep\n        });\n      }\n    };\n\n    this.handlePrevStep = () => {\n      let currentStep = this.state.currentStep;\n      currentStep = currentStep <= 0 ? 0 : currentStep - 1;\n\n      if (currentStep === 0) {\n        this.setState({\n          currentStep: 1\n        });\n        this.setViewDefault();\n      } else if (currentStep === 1) {\n        this.setState({\n          amountOfMealsPerDay: 1,\n          currentStep: currentStep,\n          addedMealNames: []\n        });\n        this.setDefaultErrorMessage();\n      } else if (currentStep === 2) {\n        this.setState({\n          selectedDates: null,\n          currentStep: currentStep\n        });\n        this.setDefaultErrorMessage();\n      } else {\n        this.setState({\n          currentStep: currentStep\n        });\n      }\n    };\n\n    this.handleAddMeals = (index, mealName) => {\n      const addedMealArr = this.state.addedMealNames;\n      addedMealArr[index] = mealName.value;\n      this.setState({\n        addedMealNames: addedMealArr\n      });\n    };\n\n    this.handleMealAmount = mealAmount => {\n      this.setState({\n        amountOfMealsPerDay: mealAmount.value\n      });\n    };\n\n    this.setDefaultErrorMessage = () => {\n      this.setState({\n        errorMessage: ''\n      });\n    };\n\n    this.handleGenerateMealPlan = () => {\n      //handle uploading info\n      if (this.state.selectedDates !== null) {\n        const req = new XMLHttpRequest();\n\n        req.onreadystatechange = () => {\n          if (req.readyState === 4) {\n            this.getDataFromDb();\n            this.setState({\n              //mealPlans: addedMealPlans,\n              clickedViewPlan: false,\n              clickedCreateMealPlan: false,\n              currentStep: 1,\n              selectedDates: null,\n              amountOfMealsPerDay: 1\n            });\n            this.setDefaultErrorMessage();\n          }\n        };\n\n        const formData = createSessionFormData(this.props);\n        formData.append('recipes', JSON.stringify(this.state.addedMealNames));\n        formData.append('start_date', (this.state.selectedDates.start.getTime() / 1000).toString());\n        formData.append('end_date', (this.state.selectedDates.end.getTime() / 1000).toString());\n        req.open('POST', 'http://cryptoflipit.com/backend/add_meal_plan');\n        req.send(formData);\n      } else {\n        this.setState({\n          errorMessage: \"Error: Please select Dates\"\n        });\n      }\n    };\n\n    this.handleCreateMealPlanRender = () => {\n      this.setState({\n        clickedCreateMealPlan: true,\n        clickedViewPlan: false\n      });\n    };\n\n    this.handleViewMealPlanRender = () => {\n      this.setState({\n        clickedCreateMealPlan: false,\n        clickedViewPlan: true\n      });\n    };\n\n    this.setViewDefault = () => {\n      this.setState({\n        clickedCreateMealPlan: false,\n        clickedViewPlan: false\n      });\n    };\n\n    this.dateFormat = (startDate, endDate) => {\n      return startDate.getMonth() + \"/\" + startDate.getDate() + \" - \" + endDate.getMonth() + \"/\" + endDate.getDate();\n    };\n\n    this.render = () => {\n      if (this.state.needLogin === true) {\n        return React.createElement(Redirect, {\n          to: {\n            pathname: '/Login'\n          },\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 213\n          },\n          __self: this\n        });\n      }\n\n      if (this.state.clickedViewPlan === false && this.state.clickedCreateMealPlan === false) {\n        return React.createElement(\"div\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 219\n          },\n          __self: this\n        }, React.createElement(PantryRaidNavBar, {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 220\n          },\n          __self: this\n        }), React.createElement(\"div\", {\n          className: \"Landing__Banner\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 221\n          },\n          __self: this\n        }, React.createElement(\"h1\", {\n          style: {\n            margin: 'auto',\n            fontSize: '18',\n            display: 'block',\n            font: 'bold',\n            'fontFamily': 'Pacifico,cursive',\n            color: '#fff'\n          },\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 222\n          },\n          __self: this\n        }, \"Meal Planning Made Easier\")), React.createElement(\"div\", {\n          className: \"Survey mt-3\",\n          style: {\n            justifyContent: 'center',\n            textAlign: 'center',\n            top: '30%',\n            left: '30%'\n          },\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 231\n          },\n          __self: this\n        }, React.createElement(Button, {\n          className: \"btn-lg mb-3 button\",\n          onClick: this.handleViewMealPlanRender,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 232\n          },\n          __self: this\n        }, \"View Meal Plan\"), React.createElement(Button, {\n          className: \"button btn-lg mt-3\",\n          onClick: this.handleCreateMealPlanRender,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 233\n          },\n          __self: this\n        }, \"Create Meal Plan\")));\n      } else if (this.state.clickedCreateMealPlan === true && this.state.clickedViewPlan === false) {\n        return React.createElement(\"div\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 239\n          },\n          __self: this\n        }, React.createElement(\"div\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 240\n          },\n          __self: this\n        }, React.createElement(PantryRaidNavBar, {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 241\n          },\n          __self: this\n        }), React.createElement(\"h1\", {\n          className: \"Survey-Header mt-4 mb-4\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 242\n          },\n          __self: this\n        }, this.state.errorMessage === '' ? \"some quick questions to generate that awesome meal plan\" : this.state.errorMessage)), React.createElement(\"div\", {\n          className: \"Survey\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 252\n          },\n          __self: this\n        }, React.createElement(Step1Meal, {\n          currentStep: this.state.currentStep,\n          handleMealAmount: this.handleMealAmount,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 253\n          },\n          __self: this\n        }), React.createElement(Step2Meal, {\n          currentStep: this.state.currentStep,\n          amountOfMealsPerDay: this.state.amountOfMealsPerDay,\n          handleAddMeals: this.handleAddMeals,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 257\n          },\n          __self: this\n        }), React.createElement(CalendarSelection, {\n          currentStep: this.state.currentStep,\n          handleCalendarSelect: this.handleCalendarSelect,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 262\n          },\n          __self: this\n        })), React.createElement(\"div\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 267\n          },\n          __self: this\n        }, React.createElement(Button, {\n          className: \"mt-3 ml-4\",\n          size: \"lg\",\n          variant: \"secondary\",\n          onClick: this.handlePrevStep,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 269\n          },\n          __self: this\n        }, \"Prev\"), this.state.currentStep <= 3 && this.state.selectedDates === null ? React.createElement(Button, {\n          className: \"float-right mt-3 mr-4\",\n          size: \"lg\",\n          onClick: this.handleNextStep,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 272\n          },\n          __self: this\n        }, \"Next\") : React.createElement(Button, {\n          className: \"float-right mt-3 mr-4\",\n          size: \"lg\",\n          onClick: this.handleGenerateMealPlan,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 274\n          },\n          __self: this\n        }, \"Generate Meal Plan\")));\n      } else if (this.state.clickedViewPlan === true && this.state.clickedCreateMealPlan === false) {\n        return React.createElement(\"div\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 282\n          },\n          __self: this\n        }, React.createElement(PantryRaidNavBar, {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 283\n          },\n          __self: this\n        }), React.createElement(\"h1\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 284\n          },\n          __self: this\n        }, \"View Meal Plan\", React.createElement(Button, {\n          onClick: this.setViewDefault,\n          className: \"mt-2 mr-2\",\n          style: {\n            marginLeft: 'auto',\n            float: 'right'\n          },\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 284\n          },\n          __self: this\n        }, \"Prev\")), React.createElement(ListGroup, {\n          as: \"ul\",\n          style: {\n            display: 'flex',\n            justifyContent: 'center',\n            textAlign: 'center'\n          },\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 286\n          },\n          __self: this\n        }, this.state.mealPlans.map(mealPlan => React.createElement(Accordion, {\n          key: `${this.dateFormat(mealPlan.dates.start, mealPlan.dates.end)}`,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 289\n          },\n          __self: this\n        }, React.createElement(ListGroup.Item, {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 290\n          },\n          __self: this\n        }, React.createElement(Card, {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 291\n          },\n          __self: this\n        }, React.createElement(Card.Header, {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 292\n          },\n          __self: this\n        }, React.createElement(Accordion.Toggle, {\n          as: Card.Header,\n          eventKey: `${this.dateFormat(mealPlan.dates.start, mealPlan.dates.end)}`,\n          className: \" p-0\",\n          style: {\n            marginRight: '2em',\n            marginTop: '0.8em',\n            border: '0',\n            backgroundColor: 'rgba(0, 0, 0, 0)',\n            textAlign: 'center',\n            fontSize: 24\n          },\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 293\n          },\n          __self: this\n        }, `${this.dateFormat(mealPlan.dates.start, mealPlan.dates.end)}`)), React.createElement(Accordion.Collapse, {\n          eventKey: `${this.dateFormat(mealPlan.dates.start, mealPlan.dates.end)}`,\n          width: '100%',\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 307\n          },\n          __self: this\n        }, React.createElement(\"div\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 309\n          },\n          __self: this\n        }, React.createElement(ReadCalendarView, {\n          selected: mealPlan.dates,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 310\n          },\n          __self: this\n        }), React.createElement(ListGroup, {\n          as: \"ul\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 311\n          },\n          __self: this\n        }, mealPlan.meals.map(recipeId => React.createElement(ListGroup.Item, {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 314\n          },\n          __self: this\n        }, RECIPE_NAMES.get(recipeId))), React.createElement(Button, {\n          variant: \"danger\",\n          onClick: () => this.handleRemoveMealPlan(mealPlan.mpid),\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 319\n          },\n          __self: this\n        }, \"Remove\"))))))))));\n      }\n    };\n  }\n\n  componentDidMount() {\n    this.getDataFromDb();\n  }\n\n}\n\nexport default withCookies(MealPlan);","map":{"version":3,"sources":["/Users/vincentwu/Documents/GitHub/csc648-03-fa19-Team101/application/team-website/src/pages/MealPlan.jsx"],"names":["React","Component","Accordion","Button","Card","ListGroup","Step1Meal","Step2Meal","CalendarSelection","ReadCalendarView","PantryRaidNavBar","RECIPE_NAMES","createSessionFormData","withCookies","Redirect","MealPlan","state","selectedDates","currentStep","addedMealNames","amountOfMealsPerDay","errorMessage","mealPlans","clickedViewPlan","clickedCreateMealPlan","needLogin","getDataFromDb","req","XMLHttpRequest","onreadystatechange","readyState","response","setState","JSON","parse","map","mp","meals","recipes","dates","start","Date","start_date","end","end_date","mpid","formData","props","open","send","handleRemoveMealPlan","append","handleCalendarSelect","event","eventType","handleNextStep","length","includes","undefined","handlePrevStep","setViewDefault","setDefaultErrorMessage","handleAddMeals","index","mealName","addedMealArr","value","handleMealAmount","mealAmount","handleGenerateMealPlan","stringify","getTime","toString","handleCreateMealPlanRender","handleViewMealPlanRender","dateFormat","startDate","endDate","getMonth","getDate","render","pathname","margin","fontSize","display","font","color","justifyContent","textAlign","top","left","marginLeft","float","mealPlan","Header","marginRight","marginTop","border","backgroundColor","recipeId","get","componentDidMount"],"mappings":"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","sourcesContent":["import React, {Component} from 'react';\nimport {Accordion, Button, Card, ListGroup} from 'react-bootstrap';\nimport Step1Meal from '../components/Step1Meals';\nimport Step2Meal from '../components/Step2Meals';\nimport CalendarSelection from '../components/CalendarSelection';\nimport ReadCalendarView from '../components/ReadCalendarView';\nimport PantryRaidNavBar from '../components/PantryRaidNavBar';\nimport {RECIPE_NAMES} from '../globals/recipes';\nimport \"./MealPlan.css\";\nimport {createSessionFormData} from \"../globals/sessionform\";\nimport {withCookies} from \"react-cookie\";\nimport {Redirect} from \"react-router-dom\";\n\nclass MealPlan extends Component {\n  state = {\n    selectedDates: null,\n    currentStep: 1,\n    addedMealNames: [],\n    amountOfMealsPerDay: 1,\n    errorMessage: '',\n    mealPlans: [],\n    clickedViewPlan: false,\n    clickedCreateMealPlan: false,\n    needLogin: false,\n  };\n\n  componentDidMount() {\n    this.getDataFromDb();\n  }\n\n  getDataFromDb = () => {\n    const req = new XMLHttpRequest();\n    req.onreadystatechange = () => {\n      if (req.readyState === 4) {\n        if (req.response === 'failure') {\n          this.setState({needLogin: true})\n        } else {\n          this.setState({\n            mealPlans: JSON.parse(req.response).map(mp => ({\n              meals: mp.recipes,\n              dates: {start: new Date(mp.start_date * 1000), end: new Date(mp.end_date * 1000)},\n              mpid: mp.mpid\n            }))\n          });\n        }\n      }\n    };\n\n    const formData = createSessionFormData(this.props);\n    req.open('POST', 'http://cryptoflipit.com/backend/get_meal_plans');\n    req.send(formData);\n  };\n\n  handleRemoveMealPlan = (mpid) => {\n    const req = new XMLHttpRequest();\n    req.onreadystatechange = () => {\n      if (req.readyState === 4) {\n        this.getDataFromDb();\n      }\n    };\n\n    const formData = createSessionFormData(this.props);\n    formData.append('mpid', mpid);\n    req.open('POST', 'http://cryptoflipit.com/backend/remove_meal_plan');\n    req.send(formData);\n  };\n\n  handleCalendarSelect = (event) => {\n    if (event.eventType === 3) {\n      this.setState({\n        selectedDates: {\n          start: event.start,\n          end: event.end,\n        }\n      });\n    }\n  };\n\n  handleNextStep = () => {\n    let currentStep = this.state.currentStep;\n\n    currentStep = currentStep >= 3 ? 4 : currentStep + 1;\n\n    if (this.state.currentStep === 2) {\n      //the array Does not include an undefined object\n      if (this.state.addedMealNames.length > 0 && !this.state.addedMealNames.includes(undefined)) {\n        this.setState({\n          currentStep: currentStep,\n          errorMessage: ''\n        });\n      } else {\n        this.setState({\n          errorMessage: 'Error: Please add meals'\n        });\n      }\n    } else {\n      this.setState({\n        currentStep: currentStep\n      });\n    }\n  };\n\n  handlePrevStep = () => {\n    let currentStep = this.state.currentStep;\n\n    currentStep = currentStep <= 0 ? 0 : currentStep - 1;\n\n    if (currentStep === 0) {\n      this.setState({\n        currentStep: 1\n      });\n      this.setViewDefault();\n    } else if (currentStep === 1) {\n      this.setState({\n        amountOfMealsPerDay: 1,\n        currentStep: currentStep,\n        addedMealNames: [],\n      });\n      this.setDefaultErrorMessage();\n    } else if (currentStep === 2) {\n      this.setState({\n        selectedDates: null,\n        currentStep: currentStep\n      });\n      this.setDefaultErrorMessage();\n    } else {\n      this.setState({\n        currentStep: currentStep\n      })\n    }\n  };\n\n  handleAddMeals = (index, mealName) => {\n    const addedMealArr = this.state.addedMealNames;\n\n    addedMealArr[index] = mealName.value;\n\n    this.setState({\n      addedMealNames: addedMealArr\n    });\n  };\n\n  handleMealAmount = (mealAmount) => {\n    this.setState({\n      amountOfMealsPerDay: mealAmount.value\n    });\n  };\n\n  setDefaultErrorMessage = () => {\n    this.setState({errorMessage: ''});\n  };\n\n  handleGenerateMealPlan = () => {\n    //handle uploading info\n    if (this.state.selectedDates !== null) {\n      const req = new XMLHttpRequest();\n      req.onreadystatechange = () => {\n        if (req.readyState === 4) {\n          this.getDataFromDb();\n          this.setState({\n            //mealPlans: addedMealPlans,\n            clickedViewPlan: false,\n            clickedCreateMealPlan: false,\n            currentStep: 1,\n            selectedDates: null,\n            amountOfMealsPerDay: 1,\n          });\n          this.setDefaultErrorMessage();\n        }\n      };\n\n      const formData = createSessionFormData(this.props);\n      formData.append('recipes', JSON.stringify(this.state.addedMealNames));\n      formData.append('start_date', (this.state.selectedDates.start.getTime() / 1000).toString());\n      formData.append('end_date', (this.state.selectedDates.end.getTime() / 1000).toString());\n      req.open('POST', 'http://cryptoflipit.com/backend/add_meal_plan');\n      req.send(formData);\n    } else {\n      this.setState({\n        errorMessage: \"Error: Please select Dates\"\n      });\n    }\n  };\n\n  handleCreateMealPlanRender = () => {\n    this.setState({\n      clickedCreateMealPlan: true,\n      clickedViewPlan: false\n    });\n  };\n\n  handleViewMealPlanRender = () => {\n    this.setState({\n      clickedCreateMealPlan: false,\n      clickedViewPlan: true\n    });\n  };\n\n  setViewDefault = () => {\n    this.setState({\n      clickedCreateMealPlan: false,\n      clickedViewPlan: false,\n    });\n  };\n\n  dateFormat = (startDate, endDate) => {\n    return (startDate.getMonth() + \"/\" + startDate.getDate() + \" - \" + endDate.getMonth() + \"/\" + endDate.getDate());\n  };\n\n  render = () => {\n    if (this.state.needLogin === true) {\n      return (\n        <Redirect to={{pathname: '/Login'}}/>\n      );\n    }\n\n    if (this.state.clickedViewPlan === false && this.state.clickedCreateMealPlan === false) {\n      return (\n        <div>\n          <PantryRaidNavBar/>\n          <div className=\"Landing__Banner\">\n            <h1 style={{\n              margin: 'auto',\n              fontSize: '18',\n              display: 'block',\n              font: 'bold',\n              'fontFamily': 'Pacifico,cursive',\n              color: '#fff'\n            }}>Meal Planning Made Easier</h1>\n          </div>\n          <div className=\"Survey mt-3\" style={{justifyContent: 'center', textAlign: 'center', top: '30%', left: '30%'}}>\n            <Button className=\"btn-lg mb-3 button\" onClick={this.handleViewMealPlanRender}>View Meal Plan</Button>\n            <Button className=\"button btn-lg mt-3\" onClick={this.handleCreateMealPlanRender}>Create Meal Plan</Button>\n          </div>\n        </div>\n      );\n    } else if (this.state.clickedCreateMealPlan === true && this.state.clickedViewPlan === false) {\n      return (\n        <div>\n          <div>\n            <PantryRaidNavBar/>\n            <h1 className=\"Survey-Header mt-4 mb-4\">\n              {\n                this.state.errorMessage === '' ?\n                  \"some quick questions to generate that awesome meal plan\"\n                  :\n                  this.state.errorMessage\n              }\n            </h1>\n          </div>\n\n          <div className=\"Survey\">\n            <Step1Meal\n              currentStep={this.state.currentStep}\n              handleMealAmount={this.handleMealAmount}\n            />\n            <Step2Meal\n              currentStep={this.state.currentStep}\n              amountOfMealsPerDay={this.state.amountOfMealsPerDay}\n              handleAddMeals={this.handleAddMeals}\n            />\n            <CalendarSelection\n              currentStep={this.state.currentStep}\n              handleCalendarSelect={this.handleCalendarSelect}\n            />\n          </div>\n          <div>\n\n            <Button className=\"mt-3 ml-4\" size=\"lg\" variant=\"secondary\" onClick={this.handlePrevStep}>Prev</Button>\n            {\n              this.state.currentStep <= 3 && this.state.selectedDates === null ?\n                <Button className=\"float-right mt-3 mr-4\" size=\"lg\" onClick={this.handleNextStep}>Next</Button>\n                :\n                <Button className=\"float-right mt-3 mr-4\" size=\"lg\" onClick={this.handleGenerateMealPlan}>Generate Meal\n                  Plan</Button>\n            }\n          </div>\n        </div>\n      );\n    } else if (this.state.clickedViewPlan === true && this.state.clickedCreateMealPlan === false) {\n      return (\n        <div>\n          <PantryRaidNavBar/>\n          <h1>View Meal Plan<Button onClick={this.setViewDefault} className='mt-2 mr-2'\n                                    style={{marginLeft: 'auto', float: 'right'}}>Prev</Button></h1>\n          <ListGroup as='ul' style={{display: 'flex', justifyContent: 'center', textAlign: 'center'}}>\n            {\n              this.state.mealPlans.map(mealPlan => (\n                <Accordion key={`${this.dateFormat(mealPlan.dates.start, mealPlan.dates.end)}`}>\n                  <ListGroup.Item>\n                    <Card>\n                      <Card.Header>\n                        <Accordion.Toggle as={Card.Header}\n                                          eventKey={`${this.dateFormat(mealPlan.dates.start, mealPlan.dates.end)}`}\n                                          className=' p-0' style={{\n                          marginRight: '2em',\n                          marginTop: '0.8em',\n                          border: '0',\n                          backgroundColor: 'rgba(0, 0, 0, 0)',\n                          textAlign: 'center',\n                          fontSize: 24\n                        }}>\n\n                          {`${this.dateFormat(mealPlan.dates.start, mealPlan.dates.end)}`}\n                        </Accordion.Toggle>\n                      </Card.Header>\n                      <Accordion.Collapse eventKey={`${this.dateFormat(mealPlan.dates.start, mealPlan.dates.end)}`}\n                                          width={'100%'}>\n                        <div>\n                          <ReadCalendarView selected={mealPlan.dates}/>\n                          <ListGroup as='ul'>\n                            {\n                              mealPlan.meals.map(recipeId => (\n                                <ListGroup.Item>\n                                  {RECIPE_NAMES.get(recipeId)}\n                                </ListGroup.Item>\n                              ))\n                            }\n                            <Button variant=\"danger\"\n                                    onClick={() => this.handleRemoveMealPlan(mealPlan.mpid)}>Remove</Button>\n                          </ListGroup>\n                        </div>\n\n                      </Accordion.Collapse>\n                    </Card>\n                  </ListGroup.Item>\n                </Accordion>\n              ))\n            }\n          </ListGroup>\n        </div>\n      );\n    }\n  }\n}\n\nexport default withCookies(MealPlan)"]},"metadata":{},"sourceType":"module"}