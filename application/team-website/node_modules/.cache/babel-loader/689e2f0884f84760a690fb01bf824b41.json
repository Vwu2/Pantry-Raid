{"ast":null,"code":"var _jsxFileName = \"/Users/vincentwu/Documents/GitHub/csc648-03-fa19-Team101/application/team-website/src/pages/Recipe.jsx\";\nimport React, { Component } from 'react';\nimport { Accordion, Button, Card, FormControl, InputGroup, ListGroup, Modal } from 'react-bootstrap';\nimport PantryRaidNavBar from '../components/PantryRaidNavBar';\nimport { createSessionFormData } from '../globals/sessionform';\nimport { withCookies } from 'react-cookie';\nimport { FOOD_NAMES } from '../globals/foods';\nimport { RECIPE_IMAGES } from '../globals/images';\nimport { Redirect } from \"react-router-dom\";\n\nconst images = require.context('../images/recipe_images', true);\n\nclass Recipe extends Component {\n  constructor(props) {\n    super(props);\n\n    this.handleChange = event => {\n      const value = event.target.value;\n      this.setState({\n        recipeInput: value\n      });\n    };\n\n    this.handleSearchRecipe = event => {\n      event.preventDefault();\n\n      if (this.state.recipeInput === '') {\n        this.getRecommendationDataFromDb();\n      } else {\n        this.setState({\n          errorMessage: ''\n        });\n        this.getSearchDataFromDb();\n      }\n    };\n\n    this.handleAddToShoppingList = () => {\n      const req = new XMLHttpRequest();\n\n      req.onreadystatechange = () => {\n        if (req.readyState === 4) {\n          this.getInventoryDataFromDb();\n          this.setState({\n            show: false\n          });\n        }\n      };\n\n      const formData = createSessionFormData(this.props);\n      formData.append('name', this.state.recipeToBeAdded);\n      formData.append('foods', JSON.stringify(this.state.ingredientsToBeAdded));\n      req.open('POST', 'http://cryptoflipit.com/backend/add_shopping_list');\n      req.send(formData);\n    };\n\n    this.handleAddIngredientsToArr = recipeIngredients => {\n      this.setState({\n        show: true,\n        ingredientsToBeAdded: recipeIngredients\n      });\n    };\n\n    this.handleShowModal = ingredients => {\n      this.setState(prevState => ({\n        show: !prevState.show,\n        ingredientsToBeAdded: []\n      }));\n    };\n\n    this.handleQueryResponse = response => {\n      if (response === '') {\n        this.setState({\n          errorMessage: 'No recipe found'\n        });\n      } else {\n        this.setState({\n          errorMessage: ''\n        });\n        const recipes = JSON.parse(response);\n\n        for (const recipe of recipes) {\n          recipe.image = images(`./${RECIPE_IMAGES.get(recipe.id)}`);\n        }\n\n        this.setState({\n          recipes: recipes\n        });\n      }\n    };\n\n    this.getRecommendationDataFromDb = () => {\n      const req = new XMLHttpRequest();\n\n      req.onreadystatechange = () => {\n        if (req.readyState === 4) {\n          this.handleQueryResponse(req.response);\n        }\n      };\n\n      const formData = createSessionFormData(this.props);\n      formData.append('start', '0');\n      formData.append('stop', '8');\n      req.open('POST', 'http://cryptoflipit.com/backend/recommend_recipes');\n      req.send(formData);\n    };\n\n    this.getSearchDataFromDb = () => {\n      const req = new XMLHttpRequest();\n\n      req.onreadystatechange = () => {\n        if (req.readyState === 4) {\n          this.handleQueryResponse(req.response);\n        }\n      }; // const formData = createSessionFormData(this.props);\n\n\n      const formData = createSessionFormData(this.props);\n      formData.append('query', this.state.recipeInput);\n      req.open('POST', 'http://cryptoflipit.com/backend/search_recipes');\n      req.send(formData);\n    };\n\n    this.getInventoryDataFromDb = () => {\n      const req = new XMLHttpRequest();\n\n      req.onreadystatechange = () => {\n        if (req.readyState === 4) {\n          if (req.response === 'failure') {\n            this.setState({\n              needLogin: true\n            });\n          } else {\n            this.state.inventory.clear();\n\n            for (const food of JSON.parse(req.response)) {\n              this.state.inventory.add(food[0]);\n            }\n          }\n        }\n      };\n\n      const formData = createSessionFormData(this.props);\n      req.open('POST', 'http://cryptoflipit.com/backend/inventory');\n      req.send(formData);\n    };\n\n    this.state = {\n      recipes: [],\n      recipeInput: '',\n      recipeNotFound: false,\n      ingredientsToBeAdded: [],\n      recipeToBeAdded: '',\n      errorMessage: '',\n      show: false,\n      inventory: new Set(),\n      needLogin: false\n    };\n    this.handleChange = this.handleChange.bind(this);\n  }\n\n  componentDidMount() {\n    this.getInventoryDataFromDb();\n    this.getRecommendationDataFromDb();\n  }\n\n  render() {\n    if (this.state.needLogin === true) {\n      return React.createElement(Redirect, {\n        to: {\n          pathname: '/Login'\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 150\n        },\n        __self: this\n      });\n    }\n\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 155\n      },\n      __self: this\n    }, React.createElement(PantryRaidNavBar, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 156\n      },\n      __self: this\n    }), React.createElement(\"h1\", {\n      style: {\n        textAlign: 'center'\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 157\n      },\n      __self: this\n    }, \"Recipes\"), React.createElement(InputGroup, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 158\n      },\n      __self: this\n    }, React.createElement(FormControl, {\n      onChange: this.handleChange,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 159\n      },\n      __self: this\n    }), React.createElement(InputGroup.Append, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 160\n      },\n      __self: this\n    }, React.createElement(Button, {\n      varient: \"primary\",\n      onClick: this.handleSearchRecipe,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 161\n      },\n      __self: this\n    }, \" Search \"))), React.createElement(\"pre\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 165\n      },\n      __self: this\n    }, React.createElement(\"h4\", {\n      className: \"text-center\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 165\n      },\n      __self: this\n    }, this.state.errorMessage)), React.createElement(ListGroup, {\n      as: \"ul\",\n      style: {\n        display: 'flex',\n        justifyContent: 'left',\n        textAlign: 'left'\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 167\n      },\n      __self: this\n    }, this.state.recipes.map(recipe => React.createElement(Accordion, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 169\n      },\n      __self: this\n    }, React.createElement(ListGroup.Item, {\n      as: \"li\",\n      className: \"p-0 mb-0\",\n      key: recipe.id,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 170\n      },\n      __self: this\n    }, React.createElement(Card, {\n      className: \"mb-0\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 171\n      },\n      __self: this\n    }, React.createElement(Accordion.Toggle, {\n      as: Card.Header,\n      eventKey: recipe.id,\n      className: \" p-0\",\n      style: {\n        backgroundColor: '#f7f7f7'\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 172\n      },\n      __self: this\n    }, React.createElement(Card.Header, {\n      className: \"p-0 mb-0\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 175\n      },\n      __self: this\n    }, React.createElement(\"img\", {\n      width: \"30%\",\n      src: recipe.image,\n      className: \"rounded float-left\",\n      alt: \"\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 176\n      },\n      __self: this\n    })), React.createElement(\"div\", {\n      style: {\n        display: 'flex',\n        flexFlow: 'column',\n        height: '100%',\n        marginTop: '0.8em',\n        border: '0',\n        textAlign: 'center',\n        fontSize: 24\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 180\n      },\n      __self: this\n    }, recipe.name)), React.createElement(Accordion.Collapse, {\n      eventKey: recipe.id,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 193\n      },\n      __self: this\n    }, React.createElement(Card.Body, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 194\n      },\n      __self: this\n    }, React.createElement(Card.Text, {\n      style: {\n        display: 'flex',\n        fontSize: 18,\n        justifyContent: 'center',\n        textAlign: 'center'\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 195\n      },\n      __self: this\n    }, \"Ingredients\"), recipe.foods.map(food => React.createElement(\"li\", {\n      key: `${recipe.id}-${food}`,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 199\n      },\n      __self: this\n    }, this.state.inventory.has(food) ? React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 201\n      },\n      __self: this\n    }, FOOD_NAMES.get(food)) : FOOD_NAMES.get(food))), React.createElement(\"div\", {\n      style: {\n        display: 'flex',\n        justifyContent: 'center',\n        textAlign: 'center'\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 205\n      },\n      __self: this\n    }, React.createElement(Button, {\n      variant: \"primary\",\n      size: \"sm\",\n      onClick: () => this.setState({\n        show: true,\n        ingredientsToBeAdded: recipe.foods,\n        recipeToBeAdded: recipe.name\n      }),\n      style: {\n        marginTop: '1em'\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 206\n      },\n      __self: this\n    }, \"Add Ingredients to Shopping List\")), React.createElement(Card.Text, {\n      style: {\n        display: 'flex',\n        fontSize: 18,\n        justifyContent: 'center',\n        textAlign: 'center'\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 215\n      },\n      __self: this\n    }, \"Directions\"), React.createElement(\"div\", {\n      dangerouslySetInnerHTML: {\n        __html: recipe.directions\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 218\n      },\n      __self: this\n    })))))))), React.createElement(Modal, {\n      show: this.state.show,\n      onHide: this.handleShowModal,\n      style: {\n        position: 'fixed',\n        top: '25%',\n        left: '10%%'\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 227\n      },\n      __self: this\n    }, React.createElement(Modal.Header, {\n      closeButton: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 229\n      },\n      __self: this\n    }, React.createElement(Modal.Title, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 230\n      },\n      __self: this\n    }, \"Add these ingredients?\")), React.createElement(ListGroup, {\n      as: \"ul\",\n      style: {\n        display: 'flex',\n        justifyContent: 'center',\n        textAlign: 'center'\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 232\n      },\n      __self: this\n    }, this.state.ingredientsToBeAdded.map(ingredient => React.createElement(ListGroup.Item, {\n      as: \"li\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 235\n      },\n      __self: this\n    }, FOOD_NAMES.get(ingredient)))), React.createElement(Modal.Footer, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 241\n      },\n      __self: this\n    }, React.createElement(Button, {\n      varient: \"outline-secondary\",\n      onClick: this.handleAddToShoppingList,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 242\n      },\n      __self: this\n    }, \"Confirm\"))));\n  }\n\n}\n\nexport default withCookies(Recipe);","map":{"version":3,"sources":["/Users/vincentwu/Documents/GitHub/csc648-03-fa19-Team101/application/team-website/src/pages/Recipe.jsx"],"names":["React","Component","Accordion","Button","Card","FormControl","InputGroup","ListGroup","Modal","PantryRaidNavBar","createSessionFormData","withCookies","FOOD_NAMES","RECIPE_IMAGES","Redirect","images","require","context","Recipe","constructor","props","handleChange","event","value","target","setState","recipeInput","handleSearchRecipe","preventDefault","state","getRecommendationDataFromDb","errorMessage","getSearchDataFromDb","handleAddToShoppingList","req","XMLHttpRequest","onreadystatechange","readyState","getInventoryDataFromDb","show","formData","append","recipeToBeAdded","JSON","stringify","ingredientsToBeAdded","open","send","handleAddIngredientsToArr","recipeIngredients","handleShowModal","ingredients","prevState","handleQueryResponse","response","recipes","parse","recipe","image","get","id","needLogin","inventory","clear","food","add","recipeNotFound","Set","bind","componentDidMount","render","pathname","textAlign","display","justifyContent","map","Header","backgroundColor","flexFlow","height","marginTop","border","fontSize","name","foods","has","__html","directions","position","top","left","ingredient"],"mappings":"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","sourcesContent":["import React, {Component} from 'react';\nimport {Accordion, Button, Card, FormControl, InputGroup, ListGroup, Modal} from 'react-bootstrap';\n\nimport PantryRaidNavBar from '../components/PantryRaidNavBar';\nimport {createSessionFormData} from '../globals/sessionform';\nimport {withCookies} from 'react-cookie';\nimport {FOOD_NAMES} from '../globals/foods';\nimport {RECIPE_IMAGES} from '../globals/images';\nimport {Redirect} from \"react-router-dom\";\n\nconst images = require.context('../images/recipe_images', true);\n\nclass Recipe extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      recipes: [],\n      recipeInput: '',\n      recipeNotFound: false,\n      ingredientsToBeAdded: [],\n      recipeToBeAdded: '',\n      errorMessage: '',\n      show: false,\n      inventory: new Set(),\n      needLogin: false,\n    };\n    this.handleChange = this.handleChange.bind(this);\n  };\n\n  componentDidMount() {\n    this.getInventoryDataFromDb();\n    this.getRecommendationDataFromDb();\n  }\n\n  handleChange = event => {\n    const value = event.target.value;\n    this.setState({recipeInput: value})\n  };\n\n  handleSearchRecipe = event => {\n    event.preventDefault();\n    if (this.state.recipeInput === '') {\n      this.getRecommendationDataFromDb();\n    } else {\n      this.setState({errorMessage: ''});\n      this.getSearchDataFromDb();\n    }\n  };\n\n  handleAddToShoppingList = () => {\n    const req = new XMLHttpRequest();\n    req.onreadystatechange = () => {\n      if (req.readyState === 4) {\n        this.getInventoryDataFromDb();\n        this.setState({show: false})\n      }\n    };\n\n    const formData = createSessionFormData(this.props);\n    formData.append('name', this.state.recipeToBeAdded);\n    formData.append('foods', JSON.stringify(this.state.ingredientsToBeAdded));\n\n    req.open('POST', 'http://cryptoflipit.com/backend/add_shopping_list');\n    req.send(formData);\n  };\n\n  handleAddIngredientsToArr = (recipeIngredients) => {\n    this.setState({\n      show: true,\n      ingredientsToBeAdded: recipeIngredients\n    })\n  };\n\n  handleShowModal = (ingredients) => {\n    this.setState(prevState => ({\n      show: !prevState.show,\n      ingredientsToBeAdded: [],\n    }));\n  };\n\n  handleQueryResponse = (response) => {\n    if (response === '') {\n      this.setState({errorMessage: 'No recipe found'});\n    } else {\n      this.setState({errorMessage: ''});\n      const recipes = JSON.parse(response);\n      for (const recipe of recipes) {\n        recipe.image = images(`./${RECIPE_IMAGES.get(recipe.id)}`);\n      }\n      this.setState({recipes: recipes})\n    }\n  };\n\n  getRecommendationDataFromDb = () => {\n    const req = new XMLHttpRequest();\n    req.onreadystatechange = () => {\n      if (req.readyState === 4) {\n        this.handleQueryResponse(req.response)\n      }\n    };\n\n    const formData = createSessionFormData(this.props);\n    formData.append('start', '0');\n    formData.append('stop', '8');\n\n    req.open('POST', 'http://cryptoflipit.com/backend/recommend_recipes');\n    req.send(formData);\n  };\n\n  //call getDataFromDb if input not empty\n  getSearchDataFromDb = () => {\n    const req = new XMLHttpRequest();\n    req.onreadystatechange = () => {\n      if (req.readyState === 4) {\n        this.handleQueryResponse(req.response)\n      }\n    };\n\n    // const formData = createSessionFormData(this.props);\n    const formData = createSessionFormData(this.props);\n    formData.append('query', this.state.recipeInput);\n\n    req.open('POST', 'http://cryptoflipit.com/backend/search_recipes');\n    req.send(formData);\n  };\n\n  getInventoryDataFromDb = () => {\n    const req = new XMLHttpRequest();\n    req.onreadystatechange = () => {\n      if (req.readyState === 4) {\n        if (req.response === 'failure') {\n          this.setState({needLogin: true})\n        } else {\n          this.state.inventory.clear();\n          for (const food of JSON.parse(req.response)) {\n            this.state.inventory.add(food[0])\n          }\n        }\n      }\n    };\n\n    const formData = createSessionFormData(this.props);\n    req.open('POST', 'http://cryptoflipit.com/backend/inventory');\n    req.send(formData);\n  };\n\n  render() {\n    if (this.state.needLogin === true) {\n      return (\n        <Redirect to={{pathname: '/Login'}}/>\n      );\n    }\n\n    return (\n      <div>\n        <PantryRaidNavBar/>\n        <h1 style={{textAlign: 'center'}}>Recipes</h1>\n        <InputGroup>\n          <FormControl onChange={this.handleChange}/>\n          <InputGroup.Append>\n            <Button varient='primary' onClick={this.handleSearchRecipe}> Search </Button>\n          </InputGroup.Append>\n        </InputGroup>\n\n        <pre><h4 className='text-center'>{this.state.errorMessage}</h4></pre>\n\n        <ListGroup as='ul' style={{display: 'flex', justifyContent: 'left', textAlign: 'left'}}>\n          {this.state.recipes.map(recipe => (\n            <Accordion>\n              <ListGroup.Item as='li' className='p-0 mb-0' key={recipe.id}>\n                <Card className='mb-0'>\n                  <Accordion.Toggle as={Card.Header} eventKey={recipe.id} className=' p-0' style={{\n                    backgroundColor: '#f7f7f7',\n                  }}>\n                    <Card.Header className='p-0 mb-0'>\n                      <img width='30%'\n                           src={recipe.image}\n                           className='rounded float-left' alt=''/>\n                    </Card.Header>\n                    <div style={{\n                      display: 'flex',\n                      flexFlow: 'column',\n                      height: '100%',\n                      marginTop: '0.8em',\n                      border: '0',\n                      textAlign: 'center',\n                      fontSize: 24\n                    }}>\n                      {recipe.name}\n                    </div>\n                  </Accordion.Toggle>\n\n                  <Accordion.Collapse eventKey={recipe.id}>\n                    <Card.Body>\n                      <Card.Text style={{display: 'flex', fontSize: 18, justifyContent: 'center', textAlign: 'center'}}>\n                        Ingredients\n                      </Card.Text>\n                      {recipe.foods.map(food => (\n                        <li key={`${recipe.id}-${food}`}>{\n                          this.state.inventory.has(food)\n                            ? (<b>{FOOD_NAMES.get(food)}</b>)\n                            : FOOD_NAMES.get(food)\n                        }</li>\n                      ))}\n                      <div style={{display: 'flex', justifyContent: 'center', textAlign: 'center'}}>\n                        <Button variant='primary' size='sm'\n                                onClick={() => this.setState({\n                                  show: true,\n                                  ingredientsToBeAdded: recipe.foods,\n                                  recipeToBeAdded: recipe.name\n                                })}\n                                style={{marginTop: '1em'}}>Add Ingredients to Shopping List\n                        </Button>\n                      </div>\n                      <Card.Text style={{display: 'flex', fontSize: 18, justifyContent: 'center', textAlign: 'center'}}>\n                        Directions\n                      </Card.Text>\n                      <div dangerouslySetInnerHTML={{__html: recipe.directions}}/>\n                    </Card.Body>\n                  </Accordion.Collapse>\n                </Card>\n              </ListGroup.Item>\n            </Accordion>\n          ))}\n        </ListGroup>\n\n        <Modal show={this.state.show} onHide={this.handleShowModal}\n               style={{position: 'fixed', top: '25%', left: '10%%'}}>\n          <Modal.Header closeButton>\n            <Modal.Title>Add these ingredients?</Modal.Title>\n          </Modal.Header>\n          <ListGroup as='ul' style={{display: 'flex', justifyContent: 'center', textAlign: 'center'}}>\n            {\n              this.state.ingredientsToBeAdded.map(ingredient => (\n                <ListGroup.Item as='li'>\n                  {FOOD_NAMES.get(ingredient)}\n                </ListGroup.Item>\n              ))\n            }\n          </ListGroup>\n          <Modal.Footer>\n            <Button\n              varient='outline-secondary'\n              onClick={this.handleAddToShoppingList}>Confirm</Button>\n          </Modal.Footer>\n        </Modal>\n      </div>\n    )\n  }\n}\n\nexport default withCookies(Recipe);\n"]},"metadata":{},"sourceType":"module"}